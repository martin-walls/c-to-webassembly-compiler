use crate::front_end::ast;
use crate::front_end::lexer;
use crate::front_end::interpret_string::interpret_string;

grammar;

extern {
    type Location = usize;
    type Error = lexer::LexError;

    enum lexer::Token {
        "!" => lexer::Token::Bang,
        "%" => lexer::Token::Percent,
        "^" => lexer::Token::Caret,
        "&" => lexer::Token::Ampersand,
        "*" => lexer::Token::Asterisk,
        "-" => lexer::Token::Minus,
        "+" => lexer::Token::Plus,
        "=" => lexer::Token::Eq,
        "~" => lexer::Token::Tilde,
        "|" => lexer::Token::Bar,
        "." => lexer::Token::Dot,
        "<" => lexer::Token::LessThan,
        ">" => lexer::Token::GreaterThan,
        "/" => lexer::Token::Slash,
        "?" => lexer::Token::Question,

        "+=" => lexer::Token::PlusEq,
        "-=" => lexer::Token::MinusEq,
        "*=" => lexer::Token::AsteriskEq,
        "/=" => lexer::Token::SlashEq,
        "%=" => lexer::Token::PercentEq,
        "<<=" => lexer::Token::LeftShiftEq,
        ">>=" => lexer::Token::RightShiftEq,
        "&=" => lexer::Token::AmpersandEq,
        "^=" => lexer::Token::CaretEq,
        "|=" => lexer::Token::BarEq,

        "->" => lexer::Token::Arrow,
        "++" => lexer::Token::DoublePlus,
        "--" => lexer::Token::DoubleMinus,
        "<<" => lexer::Token::LeftShift,
        ">>" => lexer::Token::RightShift,
        "<=" => lexer::Token::LessThanEq,
        ">=" => lexer::Token::GreaterThanEq,
        "==" => lexer::Token::DoubleEq,
        "!=" => lexer::Token::BangEq,
        "&&" => lexer::Token::DoubleAmpersand,
        "||" => lexer::Token::DoubleBar,

        "(" => lexer::Token::LeftParen,
        ")" => lexer::Token::RightParen,
        "[" => lexer::Token::LeftSquare,
        "]" => lexer::Token::RightSquare,
        "{" => lexer::Token::LeftCurly,
        "}" => lexer::Token::RightCurly,
        "," => lexer::Token::Comma,
        ";" => lexer::Token::Semicolon,
        ":" => lexer::Token::Colon,

        "'" => lexer::Token::SingleQuote,
        "\"" => lexer::Token::DoubleQuote,

        "..." => lexer::Token::Ellipsis,

        "DecimalConstant" => lexer::Token::DecimalConstant(<String>),
        "BinaryConstant" => lexer::Token::BinaryConstant(<String>),
        "OctalConstant" => lexer::Token::OctalConstant(<String>),
        "HexConstant" => lexer::Token::HexConstant(<String>),
        "FloatingConstant" => lexer::Token::FloatingConstant(<String>),
        "StringLiteral" => lexer::Token::StringLiteral(<String>),
        "CharConstant" => lexer::Token::CharConstant(<String>),

        "Identifier" => lexer::Token::Identifier(<String>),
        "TypedefName" => lexer::Token::TypedefName(<String>),

        "auto" => lexer::Token::Auto,
        "break" => lexer::Token::Break,
        "case" => lexer::Token::Case,
        "char" => lexer::Token::Char,
        "const" => lexer::Token::Const,
        "continue" => lexer::Token::Continue,
        "default" => lexer::Token::Default,
        "do" => lexer::Token::Do,
        "double" => lexer::Token::Double,
        "else" => lexer::Token::Else,
        "enum" => lexer::Token::Enum,
        "extern" => lexer::Token::Extern,
        "float" => lexer::Token::Float,
        "for" => lexer::Token::For,
        "goto" => lexer::Token::Goto,
        "if" => lexer::Token::If,
        "inline" => lexer::Token::Inline,
        "int" => lexer::Token::Int,
        "long" => lexer::Token::Long,
        "register" => lexer::Token::Register,
        "return" => lexer::Token::Return,
        "short" => lexer::Token::Short,
        "signed" => lexer::Token::Signed,
        "sizeof" => lexer::Token::Sizeof,
        "static" => lexer::Token::Static,
        "struct" => lexer::Token::Struct,
        "switch" => lexer::Token::Switch,
        "typedef" => lexer::Token::Typedef,
        "union" => lexer::Token::Union,
        "unsigned" => lexer::Token::Unsigned,
        "void" => lexer::Token::Void,
        "volatile" => lexer::Token::Volatile,
        "while" => lexer::Token::While,
    }
}

// LALRPOP MACROS

CommaSepList<T>: Vec<T> = {
  <mut v:(<T> ",")*> <e:T> => {
    v.push(e);
    v
  }
};

CommaSepListAllowTrailing<T>: Vec<T> = {
  <mut v:(<T> ",")*> <e:T?> => match e {
    None => v,
    Some(e) => {
      v.push(e);
      v
    }
  }
};

CommaSepListWithTrailing<T>: Vec<T> = {
  <(<T> ",")+>
};

// CONSTANTS -------------------------

pub Identifier: ast::Identifier = "Identifier" => ast::Identifier(<>.to_owned());

pub Constant: ast::Constant = {
  IntegerConstant => ast::Constant::Int(<>),
  DecimalFloatingConstant => ast::Constant::Float(<>),
  CharConstant => ast::Constant::Char(<>),
};

IntegerConstant: u128 = {
  DecimalConstant,
  BinaryConstant,
  OctalConstant,
  HexConstant,
};

DecimalConstant: u128 = "DecimalConstant" => u128::from_str_radix(&<>, 10).unwrap();

BinaryConstant: u128 = "BinaryConstant" => u128::from_str_radix(&<>[2..], 2).unwrap();

OctalConstant: u128 = "OctalConstant" => u128::from_str_radix(&<>, 8).unwrap();

HexConstant: u128 = "HexConstant" => u128::from_str_radix(&<>[2..], 16).unwrap();

DecimalFloatingConstant: f64 = "FloatingConstant" => <>.parse::<f64>().unwrap();

// remove leading and trailing double quote using slice
pub StringLiteral: String = "StringLiteral" => interpret_string(&<>).unwrap();

CharConstant: char = "CharConstant" => interpret_string(&<>).unwrap().chars().nth(0).unwrap();

// STATEMENTS -------------------------------

pub Program: ast::StatementList = <Statement+> => ast::StatementList(<>);

pub Statement: ast::Statement = {
  OpenStatement,
  ClosedStatement,
};

OpenStatement: ast::Statement = {
  "if" "(" <e:Expression> ")" <s:Statement> => ast::Statement::If(e, Box::new(s)),
  "if" "(" <e:Expression> ")" <t:ClosedStatement> "else" <f:OpenStatement> => ast::Statement::IfElse(e, Box::new(t), Box::new(f)),
  "while" "(" <e:Expression> ")" <s:OpenStatement> => ast::Statement::While(e, Box::new(s)),
  "for" "(" <e1:ExpressionOrDeclaration?> ";" <e2:Expression?> ";" <e3:Expression?> ")" <s:OpenStatement> => ast::Statement::For(e1, e2, e3, Box::new(s)),
  "switch" "(" <e:Expression> ")" <s:OpenStatement> => ast::Statement::Switch(e, Box::new(s)),
  "case" <e:ConditionalExpression> ":" <s:OpenStatement> => ast::Statement::Labelled(ast::LabelledStatement::Case(e, Box::new(s))),
  "default" ":" <OpenStatement> => ast::Statement::Labelled(ast::LabelledStatement::Default(Box::new(<>))),
  <i:Identifier> ":" <s:OpenStatement> => ast::Statement::Labelled(ast::LabelledStatement::Named(i, Box::new(s))),
};

ClosedStatement: ast::Statement = {
  "if" "(" <e:Expression> ")" <s1:ClosedStatement> "else" <s2:ClosedStatement> => ast::Statement::IfElse(e, Box::new(s1), Box::new(s2)),
  "goto" <Identifier> ";" => ast::Statement::Goto(<>),
  "continue" ";" => ast::Statement::Continue,
  "break" ";" => ast::Statement::Break,
  "return" <Expression?> ";" => ast::Statement::Return(<>),
  "while" "(" <e:Expression> ")" <s:ClosedStatement> => ast::Statement::While(e, Box::new(s)),
  "do" <s:Statement> "while" "(" <e:Expression> ")" ";" => ast::Statement::DoWhile(Box::new(s), e),
  "for" "(" <e1:ExpressionOrDeclaration?> ";" <e2:Expression?> ";" <e3:Expression?> ")" <s:ClosedStatement> => ast::Statement::For(e1, e2, e3, Box::new(s)),
  "switch" "(" <e:Expression> ")" <s:ClosedStatement> => ast::Statement::Switch(e, Box::new(s)),
  Block,
  <Expression> ";" => ast::Statement::Expr(<>),
  <Declaration>,
  "case" <e:ConditionalExpression> ":" <s:ClosedStatement> => ast::Statement::Labelled(ast::LabelledStatement::Case(e, Box::new(s))),
  "default" ":" <ClosedStatement> => ast::Statement::Labelled(ast::LabelledStatement::Default(Box::new(<>))),
  <i:Identifier> ":" <s:ClosedStatement> => ast::Statement::Labelled(ast::LabelledStatement::Named(i, Box::new(s))),
  ";" => ast::Statement::Empty,
};

Block: ast::Statement = {
  "{" <Statement*> "}" => ast::Statement::Block(<>),
};

// for for statements, where the first expression can be either an expression
// or a declaration
#[inline]
ExpressionOrDeclaration: ast::ExpressionOrDeclaration = {
  <Expression> => ast::ExpressionOrDeclaration::Expression(<>),
  <sqs:SpecifierQualifier+> <d:DeclaratorInitialiserList> => ast::ExpressionOrDeclaration::Declaration(Box::new(ast::Statement::Declaration(ast::SpecifierQualifier::create(sqs).unwrap(), d))),
};

// DECLARATIONS -----------------------------

pub Declaration: ast::Statement = {
  <sqs:SpecifierQualifier+> <d:DeclaratorInitialiserList> ";" => ast::Statement::Declaration(ast::SpecifierQualifier::create(sqs).unwrap(), d),
  <sqs:SpecifierQualifier+> <d:Declarator> <b:Block> => ast::Statement::FunctionDeclaration(ast::SpecifierQualifier::create(sqs).unwrap(), d, Box::new(b)),
  // for structs, unions, enums
  <SpecifierQualifier+> ";" => ast::Statement::EmptyDeclaration(ast::SpecifierQualifier::create(<>).unwrap()),
};

pub SpecifierQualifier: ast::SpecifierQualifierToken = {
  <TypeSpecifier> => ast::SpecifierQualifierToken::TypeSpecifier(<>),
  <StorageClassSpecifier> => ast::SpecifierQualifierToken::StorageClassSpecifier(<>),
  <TypeQualifier> => ast::SpecifierQualifierToken::TypeQualifier(<>),
  <FunctionSpecifier> => ast::SpecifierQualifierToken::FunctionSpecifier(<>),
};

pub TypeSpecifier: ast::TypeSpecifierToken = {
  <ArithmeticTypeSpecifier> => ast::TypeSpecifierToken::ArithmeticType(<>),
  "void" => ast::TypeSpecifierToken::Void,
  <StructDeclaration> => ast::TypeSpecifierToken::Struct(<>),
  <UnionDeclaration> => ast::TypeSpecifierToken::Union(<>),
  <EnumDeclaration> => ast::TypeSpecifierToken::Enum(<>),
  <TypeName> => ast::TypeSpecifierToken::CustomType(<>),
};

TypeName: ast::Identifier = "TypedefName" => ast::Identifier(<>.to_owned());

StorageClassSpecifier: ast::StorageClassSpecifier = {
  "auto" => ast::StorageClassSpecifier::Auto,
  "extern" => ast::StorageClassSpecifier::Extern,
  "register" => ast::StorageClassSpecifier::Register,
  "static" => ast::StorageClassSpecifier::Static,
  "typedef" => ast::StorageClassSpecifier::Typedef,
};

TypeQualifier: ast::TypeQualifier = {
  "const" => ast::TypeQualifier::Const,
};

FunctionSpecifier: ast::FunctionSpecifier = {
    "inline" => ast::FunctionSpecifier::Inline,
};

ArithmeticTypeSpecifier: ast::ArithmeticTypeSpecifierToken = {
  "char" => ast::ArithmeticTypeSpecifierToken::Char,
  "short" => ast::ArithmeticTypeSpecifierToken::Short,
  "int" => ast::ArithmeticTypeSpecifierToken::Int,
  "long" => ast::ArithmeticTypeSpecifierToken::Long,
  "signed" => ast::ArithmeticTypeSpecifierToken::Signed,
  "unsigned" => ast::ArithmeticTypeSpecifierToken::Unsigned,
  "float" => ast::ArithmeticTypeSpecifierToken::Float,
  "double" => ast::ArithmeticTypeSpecifierToken::Double,
};

StructDeclaration: ast::StructType = {
  "struct" <Identifier> => ast::StructType::Declaration(<>),
  "struct" <Identifier?> "{" <StructMemberDeclaration+> "}" => ast::StructType::Definition(<>),
};

StructMemberDeclaration: ast::StructMemberDeclaration = {
  <sqs:SpecifierQualifier+> <d:DeclaratorList> ";" => ast::StructMemberDeclaration(ast::SpecifierQualifier::create(sqs).unwrap(), d),
};

UnionDeclaration: ast::UnionType = {
  "union" <Identifier> => ast::UnionType::Declaration(<>),
  "union" <Identifier?> "{" <StructMemberDeclaration+> "}" => ast::UnionType::Definition(<>),
};

EnumDeclaration: ast::EnumType = {
  "enum" <Identifier> => ast::EnumType::Declaration(<>),
  "enum" <Identifier?> "{" <EnumeratorList> "}" => ast::EnumType::Definition(<>),
};

EnumeratorList = CommaSepListAllowTrailing<Enumerator>;

Enumerator: ast::Enumerator = {
  <Identifier> => ast::Enumerator::Simple(<>),
  <Identifier> "=" <ConstantExpression> => ast::Enumerator::WithValue(<>),
};

DeclaratorList = CommaSepList<Declarator>;

Declarator: ast::Declarator = {
  <PtrDeclarator>,
  <NoPtrDeclarator>,
};

PtrDeclarator: ast::Declarator = {
  "*" <Declarator?> => match <> {
    None => ast::Declarator::AbstractPointerDeclarator,
    Some(d) => ast::Declarator::PointerDeclarator(Box::new(d)),
  }
};

NoPtrDeclarator: ast::Declarator = {
  <Identifier> => ast::Declarator::Identifier(<>),
  "(" <Declarator> ")",
  // Array declarator
  <d:NoPtrDeclarator> "[" <e:AssignmentExpression?> "]" => ast::Declarator::ArrayDeclarator(Box::new(d), e.map(|e| Box::new(e))),
  // Function declarator
  <d:NoPtrDeclarator> "(" <ps:ParameterTypeList?> ")" => ast::Declarator::FunctionDeclarator(Box::new(d), ps),
};

ParameterTypeList: ast::ParameterTypeList = {
  <ParameterList> => ast::ParameterTypeList::Normal(<>),
  // variadic functions
  <CommaSepListWithTrailing<ParameterDeclaration>> "..." => ast::ParameterTypeList::Variadic(<>),
};

ParameterList = CommaSepList<ParameterDeclaration>;

ParameterDeclaration: ast::ParameterDeclaration = {
  <sqs:SpecifierQualifier+> <d:Declarator?> => {
    ast::ParameterDeclaration(ast::SpecifierQualifier::create(sqs).unwrap(), d)
  }
};

DeclaratorInitialiserList = CommaSepList<DeclaratorInitialiser>;

DeclaratorInitialiser: ast::DeclaratorInitialiser = {
  <Declarator> => ast::DeclaratorInitialiser::NoInit(<>),
  <Declarator> "=" <Initialiser> => ast::DeclaratorInitialiser::Init(<>),
//  <Declarator> "=" "{" <CommaSepListAllowTrailing<ConstantExpression>> "}" => ast::DeclaratorInitialiser::StructOrUnion(<>),
};

Initialiser: ast::Initialiser = {
    <AssignmentExpression> => ast::Initialiser::Expr(<>),
    "{" <CommaSepListAllowTrailing<Initialiser>> "}" => ast::Initialiser::List(<>),
};


// TypeName: ast::TypeName = {
//   // <SpecifierQualifier+> <AbstractDeclarator?>,
//   <SpecifierQualifier+> <Declarator?> => ast::TypeName(<>),
// };





// EXPRESSIONS ------------------------------

ConstantExpression = ConditionalExpression;

pub Expression: ast::Expression = {
  AssignmentExpression,
  <e1:Expression> "," <e2:AssignmentExpression> => ast::Expression::ExpressionList(Box::new(e1), Box::new(e2))
};

AssignmentExpression: ast::Expression = {
  ConditionalExpression,
  <dest:ConditionalExpression> "=" <src:AssignmentExpression>
    => ast::Expression::Assignment(Box::new(dest), Box::new(src)),
  <dest:ConditionalExpression> "*=" <src:AssignmentExpression>
    => ast::Expression::Assignment(Box::new(dest.to_owned()), Box::new(ast::Expression::BinaryOp(ast::BinaryOperator::Mult, Box::new(dest), Box::new(src)))),
  <dest:ConditionalExpression> "/=" <src:AssignmentExpression>
    => ast::Expression::Assignment(Box::new(dest.to_owned()), Box::new(ast::Expression::BinaryOp(ast::BinaryOperator::Div, Box::new(dest), Box::new(src)))),
  <dest:ConditionalExpression> "%=" <src:AssignmentExpression>
    => ast::Expression::Assignment(Box::new(dest.to_owned()), Box::new(ast::Expression::BinaryOp(ast::BinaryOperator::Mod, Box::new(dest), Box::new(src)))),
  <dest:ConditionalExpression> "+=" <src:AssignmentExpression>
    => ast::Expression::Assignment(Box::new(dest.to_owned()), Box::new(ast::Expression::BinaryOp(ast::BinaryOperator::Add, Box::new(dest), Box::new(src)))),
  <dest:ConditionalExpression> "-=" <src:AssignmentExpression>
    => ast::Expression::Assignment(Box::new(dest.to_owned()), Box::new(ast::Expression::BinaryOp(ast::BinaryOperator::Sub, Box::new(dest), Box::new(src)))),
  <dest:ConditionalExpression> "<<=" <src:AssignmentExpression>
    => ast::Expression::Assignment(Box::new(dest.to_owned()), Box::new(ast::Expression::BinaryOp(ast::BinaryOperator::LeftShift, Box::new(dest), Box::new(src)))),
  <dest:ConditionalExpression> ">>=" <src:AssignmentExpression>
    => ast::Expression::Assignment(Box::new(dest.to_owned()), Box::new(ast::Expression::BinaryOp(ast::BinaryOperator::RightShift, Box::new(dest), Box::new(src)))),
  <dest:ConditionalExpression> "&=" <src:AssignmentExpression>
    => ast::Expression::Assignment(Box::new(dest.to_owned()), Box::new(ast::Expression::BinaryOp(ast::BinaryOperator::BitwiseAnd, Box::new(dest), Box::new(src)))),
  <dest:ConditionalExpression> "^=" <src:AssignmentExpression>
    => ast::Expression::Assignment(Box::new(dest.to_owned()), Box::new(ast::Expression::BinaryOp(ast::BinaryOperator::BitwiseXor, Box::new(dest), Box::new(src)))),
  <dest:ConditionalExpression> "|=" <src:AssignmentExpression>
    => ast::Expression::Assignment(Box::new(dest.to_owned()), Box::new(ast::Expression::BinaryOp(ast::BinaryOperator::BitwiseOr, Box::new(dest), Box::new(src)))),
}

ConditionalExpression: ast::Expression = {
  <LogicalOrExpression>,
  <e:LogicalOrExpression> "?" <t:Expression> ":" <f:ConditionalExpression>
    => ast::Expression::Ternary(Box::new(e), Box::new(t), Box::new(f)),
};

LogicalOrExpression: ast::Expression = {
  LogicalAndExpression,
  <e1:LogicalOrExpression> "||" <e2:LogicalAndExpression>
    => ast::Expression::BinaryOp(ast::BinaryOperator::LogicalOr, Box::new(e1), Box::new(e2)),
};

LogicalAndExpression: ast::Expression = {
  InclusiveOrExpression,
  <e1:LogicalAndExpression> "&&" <e2:InclusiveOrExpression>
    => ast::Expression::BinaryOp(ast::BinaryOperator::LogicalAnd, Box::new(e1), Box::new(e2)),
};

InclusiveOrExpression: ast::Expression = {
  ExclusiveOrExpression,
  <e1:InclusiveOrExpression> "|" <e2:ExclusiveOrExpression>
    => ast::Expression::BinaryOp(ast::BinaryOperator::BitwiseOr, Box::new(e1), Box::new(e2)),
};

ExclusiveOrExpression: ast::Expression = {
  AndExpression,
  <e1:ExclusiveOrExpression> "^" <e2:AndExpression>
    => ast::Expression::BinaryOp(ast::BinaryOperator::BitwiseXor, Box::new(e1), Box::new(e2)),
};

AndExpression: ast::Expression = {
  EqualityExpression,
  <e1:AndExpression> "&" <e2:EqualityExpression>
    => ast::Expression::BinaryOp(ast::BinaryOperator::BitwiseAnd, Box::new(e1), Box::new(e2)),
};

EqualityExpression: ast::Expression = {
  RelationalExpression,
  <e1:EqualityExpression> "==" <e2:RelationalExpression>
    => ast::Expression::BinaryOp(ast::BinaryOperator::Equal, Box::new(e1), Box::new(e2)),
  <e1:EqualityExpression> "!=" <e2:RelationalExpression>
    => ast::Expression::BinaryOp(ast::BinaryOperator::NotEqual, Box::new(e1), Box::new(e2)),
};

RelationalExpression: ast::Expression = {
  ShiftExpression,
  <e1:RelationalExpression> "<" <e2:ShiftExpression>
    => ast::Expression::BinaryOp(ast::BinaryOperator::LessThan, Box::new(e1), Box::new(e2)),
  <e1:RelationalExpression> ">" <e2:ShiftExpression>
    => ast::Expression::BinaryOp(ast::BinaryOperator::GreaterThan, Box::new(e1), Box::new(e2)),
  <e1:RelationalExpression> "<=" <e2:ShiftExpression>
    => ast::Expression::BinaryOp(ast::BinaryOperator::LessThanEq, Box::new(e1), Box::new(e2)),
  <e1:RelationalExpression> ">=" <e2:ShiftExpression>
    => ast::Expression::BinaryOp(ast::BinaryOperator::GreaterThanEq, Box::new(e1), Box::new(e2)),
};

ShiftExpression: ast::Expression = {
  AdditiveExpression,
  <e1:ShiftExpression> "<<" <e2:AdditiveExpression>
    => ast::Expression::BinaryOp(ast::BinaryOperator::LeftShift, Box::new(e1), Box::new(e2)),
  <e1:ShiftExpression> ">>" <e2:AdditiveExpression>
    => ast::Expression::BinaryOp(ast::BinaryOperator::RightShift, Box::new(e1), Box::new(e2)),
};

AdditiveExpression: ast::Expression = {
  MultiplicativeExpression,
  <e1:AdditiveExpression> "+" <e2:MultiplicativeExpression>
    => ast::Expression::BinaryOp(ast::BinaryOperator::Add, Box::new(e1), Box::new(e2)),
  <e1:AdditiveExpression> "-" <e2:MultiplicativeExpression>
    => ast::Expression::BinaryOp(ast::BinaryOperator::Sub, Box::new(e1), Box::new(e2)),
};

MultiplicativeExpression: ast::Expression = {
  CastExpression,
  <e1:MultiplicativeExpression> "*" <e2:CastExpression>
    => ast::Expression::BinaryOp(ast::BinaryOperator::Mult, Box::new(e1), Box::new(e2)),
  <e1:MultiplicativeExpression> "/" <e2:CastExpression>
    => ast::Expression::BinaryOp(ast::BinaryOperator::Div, Box::new(e1), Box::new(e2)),
  <e1:MultiplicativeExpression> "%" <e2:CastExpression>
    => ast::Expression::BinaryOp(ast::BinaryOperator::Mod, Box::new(e1), Box::new(e2)),
};

CastExpression: ast::Expression = {
  UnaryExpression,
  "(" <sqs:SpecifierQualifier+> <d:Declarator?> ")" <e:CastExpression> => ast::Expression::Cast(ast::TypeName(ast::SpecifierQualifier::create(sqs).unwrap(), d), Box::new(e)),
};

UnaryExpression: ast::Expression = {
  PostfixExpression,
  "++" <UnaryExpression> => ast::Expression::PrefixIncrement(Box::new(<>)),
  "--" <UnaryExpression> => ast::Expression::PrefixDecrement(Box::new(<>)),
  <op:UnaryOperator> <e:CastExpression> => ast::Expression::UnaryOp(op, Box::new(e)),
  "sizeof" <UnaryExpression> => ast::Expression::SizeOfExpr(Box::new(<>)),
   "sizeof" "(" <sqs:SpecifierQualifier+> <d:Declarator?> ")" => ast::Expression::SizeOfType(ast::TypeName(ast::SpecifierQualifier::create(sqs).unwrap(), d)),
};

UnaryOperator: ast::UnaryOperator = {
  "&" => ast::UnaryOperator::AddressOf,
  "*" => ast::UnaryOperator::Dereference,
  "+" => ast::UnaryOperator::Plus,
  "-" => ast::UnaryOperator::Minus,
  "~" => ast::UnaryOperator::BitwiseNot,
  "!" => ast::UnaryOperator::LogicalNot,
};

PostfixExpression: ast::Expression = {
  PrimaryExpression,
  <e:PostfixExpression> "[" <ind:Expression> "]" => ast::Expression::Index(Box::new(e), Box::new(ind)),
  <e:PostfixExpression> "(" <args:ArgumentExpressionList?> ")" => {
    match args {
        Some(args) => ast::Expression::FunctionCall(Box::new(e), args),
        None => ast::Expression::FunctionCall(Box::new(e), vec![]),
    }
  },
  <e:PostfixExpression> "." <i:Identifier> => ast::Expression::DirectMemberSelection(Box::new(e), i),
  <e:PostfixExpression> "->" <i:Identifier> => ast::Expression::IndirectMemberSelection(Box::new(e), i),
  <PostfixExpression> "++" => ast::Expression::PostfixIncrement(Box::new(<>)),
  <PostfixExpression> "--" => ast::Expression::PostfixDecrement(Box::new(<>)),
};

ArgumentExpressionList = CommaSepList<AssignmentExpression>;

PrimaryExpression: ast::Expression = {
  <Identifier> => ast::Expression::Identifier(<>),
  <Constant> => ast::Expression::Constant(<>),
  <StringLiteral> => ast::Expression::StringLiteral(<>),
  "(" <Expression> ")",
};
